package com.example.workshiftapp.models;

import android.content.Context; // For context in Android
import android.os.Environment; // For accessing external storage

// iText PDF libraries
import com.itextpdf.kernel.colors.ColorConstants; // For defining colors
import com.itextpdf.kernel.pdf.PdfDocument; // For creating and managing the PDF document
import com.itextpdf.kernel.pdf.PdfWriter; // For writing content to the PDF file
import com.itextpdf.kernel.pdf.canvas.draw.SolidLine; // For drawing solid lines

// iText layout libraries
import com.itextpdf.layout.Document; // For managing the layout of the PDF
import com.itextpdf.layout.border.Border; // For customizing cell borders
import com.itextpdf.layout.element.Cell; // For creating table cells
import com.itextpdf.layout.element.Paragraph; // For adding text paragraphs
import com.itextpdf.layout.element.Table; // For creating tables in the PDF
import com.itextpdf.layout.property.TextAlignment; // For text alignment
import com.itextpdf.layout.property.UnitValue; // For defining table column widths
import com.itextpdf.layout.element.LineSeparator;






import java.io.File;
import java.io.FileOutputStream;

public class PayslipGenerator {

    public static void generatePayslip(Context context, String companyName, String companyAddress,
                                       String employeeName, String position, String month, String year,
                                       double hourlyWage, int hoursWorked, double deductions, double netSalary) {
        try {
            // Directory and file path
            File pdfDir = new File(Environment.getExternalStorageDirectory(), "Payslips");
            if (!pdfDir.exists()) {
                pdfDir.mkdir();
            }
            File file = new File(pdfDir, employeeName + "_Payslip_" + month + "_" + year + ".pdf");

            // Initialize PDF Writer
            PdfWriter writer = new PdfWriter(new FileOutputStream(file));
            PdfDocument pdfDoc = new PdfDocument(writer);
            Document document = new Document(pdfDoc);

            // Header Section
            document.add(new Paragraph(companyName)
                    .setBold()
                    .setFontSize(16)
                    .setTextAlignment(TextAlignment.CENTER));
            document.add(new Paragraph(companyAddress)
                    .setFontSize(10)
                    .setTextAlignment(TextAlignment.CENTER));
            document.add(new Paragraph("Payslip for " + month + " " + year)
                    .setFontSize(12)
                    .setTextAlignment(TextAlignment.CENTER));
            document.add(new LineSeparator(new SolidLine()).setMarginTop(10).setMarginBottom(10));

            // Employee Details Section
            Table employeeDetailsTable = new Table(UnitValue.createPercentArray(new float[]{1, 2}))
                    .useAllAvailableWidth();
            employeeDetailsTable.addCell(createCell("Employee Name", true));
            employeeDetailsTable.addCell(createCell(employeeName, false));
            employeeDetailsTable.addCell(createCell("Position", true));
            employeeDetailsTable.addCell(createCell(position, false));
            employeeDetailsTable.addCell(createCell("Month", true));
            employeeDetailsTable.addCell(createCell(month + " " + year, false));
            document.add(employeeDetailsTable.setMarginBottom(20));

            // Salary Breakdown Section
            Table salaryTable = new Table(UnitValue.createPercentArray(new float[]{1, 1}))
                    .useAllAvailableWidth();
            salaryTable.addCell(createCell("Hourly Wage", true));
            salaryTable.addCell(createCell(String.format("$%.2f", hourlyWage), false));
            salaryTable.addCell(createCell("Hours Worked", true));
            salaryTable.addCell(createCell(String.valueOf(hoursWorked), false));
            salaryTable.addCell(createCell("Gross Salary", true));
            salaryTable.addCell(createCell(String.format("$%.2f", hourlyWage * hoursWorked), false));
            salaryTable.addCell(createCell("Deductions", true));
            salaryTable.addCell(createCell(String.format("$%.2f", deductions), false));
            salaryTable.addCell(createCell("Net Salary", true, ColorConstants.WHITE, ColorConstants.BLUE));
            salaryTable.addCell(createCell(String.format("$%.2f", netSalary), false, ColorConstants.WHITE, ColorConstants.BLUE));
            document.add(salaryTable.setMarginBottom(20));

            // Footer Section
            document.add(new LineSeparator(new SolidLine()).setMarginTop(10).setMarginBottom(10));
            document.add(new Paragraph("Thank you for your hard work!")
                    .setFontSize(10)
                    .setTextAlignment(TextAlignment.CENTER));
            document.add(new Paragraph("Generated by PayslipGenerator")
                    .setFontSize(8)
                    .setTextAlignment(TextAlignment.CENTER));

            // Close document
            document.close();
            writer.close();

            System.out.println("Payslip generated successfully!");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private static Cell createCell(String content, boolean isBold) {
        return createCell(content, isBold, ColorConstants.BLACK, ColorConstants.WHITE);
    }

    private static Cell createCell(String content, boolean isBold, com.itextpdf.kernel.colors.Color textColor, com.itextpdf.kernel.colors.Color backgroundColor) {
        Cell cell = new Cell()
                .add(new Paragraph(content)
                        .setBold(isBold)
                        .setFontSize(10)
                        .setFontColor(textColor))
                .setBackgroundColor(backgroundColor)
                .setBorder(Border.NO_BORDER)
                .setTextAlignment(TextAlignment.LEFT);
        return cell;
    }
}

